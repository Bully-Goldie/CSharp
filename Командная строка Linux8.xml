<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Командная строка Linux</title>
  <link href="../Styles/template.css" rel="stylesheet" type="text/css"/>
</head>

<body id="x978549602303" xml:lang="en-US">
  <div class="Basic-Text-Frame">
     <h1 id="toc_marker-13" xml:lang="ru-RU">10. Процессы</h1>

    <p class="Normal0" xml:lang="ru-RU">Современные операционные системы обычно являются <em>многозадачными</em>, в том смысле, что создают иллюзию одновременного решения множества задач, быстро переключаясь с выполнения одной программы на другую. Ядро Linux управляет всем этим посредством <em>процессов</em>. Именно с помощью процессов Linux организует приостановку программ в ожидании, пока наступит их очередь использовать процессор.</p>

    <p xml:lang="ru-RU">Иногда компьютер становится «вялым», или приложение вообще перестает откликаться на команды пользователя. Сейчас мы познакомимся с некоторыми инструментами командной строки, позволяющими увидеть, что делают программы, и завершить процессы, вышедшие из-под контроля.</p>

    <p xml:lang="ru-RU">В этой главе будут представлены следующие команды:</p>

    <p class="ListBul" xml:lang="ru-RU"><span class="command char-style-override-1">• ps</span> — выводит список процессов, выполняющихся в текущий момент.</p>

    <p class="ListBul" xml:lang="ru-RU"><span class="command char-style-override-1">• top</span> — выводит задачи.</p>

    <p class="ListBul" xml:lang="ru-RU"><span class="command char-style-override-1">• jobs</span> — выводит список активных заданий.</p>

    <p class="ListBul" xml:lang="ru-RU"><span class="command char-style-override-1">• bg</span> — переводит задание в фоновый режим работы.</p>

    <p class="ListBul" xml:lang="ru-RU"><span class="command char-style-override-1">• fg</span> — переводит задание в режим работы на переднем плане.</p>

    <p class="ListBul" xml:lang="ru-RU"><span class="command char-style-override-1">• kill</span> — посылает сигнал процессу.</p>

    <p class="ListBul" xml:lang="ru-RU"><span class="command char-style-override-1">• killall</span> — останавливает процессы по именам.</p>

    <p class="ListBul" xml:lang="ru-RU">• <span class="command char-style-override-1">shutdown</span> — останавливает или перезагружает систему.</p>

    <h2 id="toc_marker-13-1" xml:lang="ru-RU">Как действует процесс</h2>

    <p class="Normal0" xml:lang="ru-RU">В момент запуска системы ядро инициирует выполнение нескольких собственных задач в виде процессов и запускает программу с названием <span class="command char-style-override-1">init</span>. В свою очередь <span class="command char-style-override-1">init</span> выполняет последовательность сценариев командной оболочки (находятся в <em>/etc</em>), называемых <em>сценариями начальной загрузки</em> (init scripts), которые запускают все системные службы. Многие из этих служб реализованы как <em>программы-демоны</em> (daemon programs), то есть программы, действующие в фоновом режиме и выполняющие свою работу без участия пользователя. Поэтому, даже в отсутствие зарегистрированных пользователей система выполняет определенные служебные процедуры.</p>

    <p xml:lang="ru-RU">Принцип, по которому программа может запускать другие программы, выражается правилом: <em>родительский процесс</em> запускает <em>дочерний процесс</em>.</p>

    <p xml:lang="ru-RU">Ядро хранит информацию обо всех процессах, чтобы упорядочить их работу. Например, каждому процессу присваивается номер, который называют <em>идентификатором процесса</em> (Process ID, PID). Идентификаторы процессов присваиваются в порядке возрастания, при этом процесс <span class="command char-style-override-1">init</span> всегда получает идентификатор PID 1. Ядро также следит за памятью, выделенной каждому процессу, и за готовностью процессов возобновить выполнение. Подобно файлам, процессы также имеют идентификаторы владельца и пользователя, эффективный (или действующий) идентификатор пользователя и т.д.</p>

    <h3 xml:lang="ru-RU">Просмотр списка процессов с помощью ps</h3>

    <p class="Normal0" xml:lang="ru-RU">Чаще всего для просмотра списка процессов используется команда <span class="command char-style-override-1">ps</span>. Программа <span class="command char-style-override-1">ps</span> имеет множество параметров, но в самом простейшем случае она используется следующим образом:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>ps</strong></p>

    <p class="listing-body">&#160;&#160;PID TTY&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;TIME CMD</p>

    <p class="listing-body">5198 pts/1&#160;&#160;&#160;&#160;00:00:00 bash</p>

    <p class="list-last">10129 pts/1&#160;&#160;&#160;&#160;00:00:00 ps</p>

    <p xml:lang="ru-RU">В этом примере команда вывела список с двумя процессами: процесс 5198 и процесс 10129 — программы <span class="command char-style-override-1">bash</span> и <span class="command char-style-override-1">ps</span> соответственно. Как можно заметить, по умолчанию <span class="command char-style-override-1">ps</span> выводит не очень много информации, только процессы, связанные с текущим сеансом. Чтобы увидеть больше, следует передать дополнительные параметры, но прежде чем мы сделаем это, давайте рассмотрим другие поля в выводе команды <span class="command char-style-override-1">ps</span>. Поле <span class="command char-style-override-1">TTY</span> — это сокращение от <em>teletype</em> (телетайп), оно содержит информацию об управляющем терминале процесса. В Unix в этом поле выводится тип терминала. Поле <span class="command char-style-override-1">TIME</span> содержит объем процессорного времени, потребленного процессом. Как видите, ни один из процессов не является слишком обременительным для компьютера.</p>

    <p xml:lang="ru-RU">Если добавить параметр <span class="command char-style-override-1">x</span>, можно получить более богатую информацию о происходящем в системе:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>ps x</strong></p>

    <p class="listing-body">&#160;&#160;PID TTY&#160;&#160;&#160;&#160;&#160;&#160;STAT&#160;&#160;&#160;TIME COMMAND</p>

    <p class="listing-body">2799 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ssl&#160;&#160;&#160;&#160;0:00 /usr/libexec/bonobo-activation-server –ac</p>

    <p class="listing-body">2820 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Sl&#160;&#160;&#160;&#160;&#160;0:01 /usr/libexec/evolution-data-server-1.10 --</p>

    <p class="listing-body">15647 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ss&#160;&#160;&#160;&#160;&#160;0:00 /bin/sh /usr/bin/startkde</p>

    <p class="listing-body">15751 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ss&#160;&#160;&#160;&#160;&#160;0:00 /usr/bin/ssh-agent /usr/bin/dbus-launch --</p>

    <p class="listing-body">15754 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S&#160;&#160;&#160;&#160;&#160;&#160;0:00 /usr/bin/dbus-launch --exit-with-session</p>

    <p class="listing-body">15755 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ss&#160;&#160;&#160;&#160;&#160;0:01 /bin/dbus-daemon --fork --print-pid 4 –pr</p>

    <p class="listing-body">15774 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ss&#160;&#160;&#160;&#160;&#160;0:02 /usr/bin/gpg-agent -s –daemon</p>

    <p class="listing-body">15793 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S&#160;&#160;&#160;&#160;&#160;&#160;0:00 start_kdeinit --new-startup +kcminit_start</p>

    <p class="listing-body">15794 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ss&#160;&#160;&#160;&#160;&#160;0:00 kdeinit Running...</p>

    <p class="listing-body">15797 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S&#160;&#160;&#160;&#160;&#160;&#160;0:00 dcopserver –nosid</p>

    <p class="list-last">и еще много других процессов...</p>

    <p xml:lang="ru-RU">Дополнительный параметр <span class="command char-style-override-1">x</span> (обратите внимание на отсутствие дефиса) сообщает команде <span class="command char-style-override-1">ps</span>, что та должна вывести все процессы, независимо от того, какие терминалы (если таковые имеются) управляют ими. Символ <span class="command char-style-override-1">?</span> в поле <span class="command char-style-override-1">TTY</span> указывает на отсутствие управляющего терминала. Таким образом, параметр <span class="command char-style-override-1">x</span> позволяет увидеть все процессы в системе, которыми мы владеем.</p>

    <p xml:lang="ru-RU">Так как в системе одновременно выполняется множество процессов, <span class="command char-style-override-1">ps</span> производит довольно длинные списки. Часто бывает полезно передать вывод <span class="command char-style-override-1">ps</span> команде <span class="command char-style-override-1">less</span> через конвейер, чтобы его проще было просматривать. Некоторые комбинации параметров приводят к выводу очень длинных строк, поэтому нелишним будет также распахнуть окно эмулятора терминала на весь экран.</p>

    <p xml:lang="ru-RU">В этом примере в выводе появился новый столбец — <span class="command char-style-override-1">STAT</span>. Название <span class="command char-style-override-1">STAT</span> — это сокращение от <em>state</em> (состояние), столбец содержит информацию о текущем состоянии процесса, как показано в табл. 10.1.</p>

    <p class="Tabl-head" xml:lang="ru-RU"><strong>Таблица 10.1.</strong> Состояния процессов</p>

    <table id="table-34" class="Table-Style-1">
      <colgroup>      <col/>

      <col/>

</colgroup>

      <tbody>      <tr>      <td class="Cell-Style-2 cell-style-override-1">       <p class="Tabl-head" xml:lang="ru-RU">Состояние</p>

</td>

      <td class="Cell-Style-2 cell-style-override-1">       <p class="Tabl-head" xml:lang="ru-RU">Значение</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1 cell-style-override-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">R</span></p>

</td>

      <td class="Cell-Style-1 cell-style-override-1">       <p class="Tabl-body" xml:lang="ru-RU">Выполняется. Процесс выполняется или готов к выполнению</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1 cell-style-override-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">S</span></p>

</td>

      <td class="Cell-Style-1 cell-style-override-1">       <p class="Tabl-body" xml:lang="ru-RU">Приостановлен. Процесс временно не выполняется; скорее всего, находится в ожидании определенного события, такого как нажатие клавиши или прибытие сетевого пакета</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1 cell-style-override-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">D</span></p>

</td>

      <td class="Cell-Style-1 cell-style-override-1">       <p class="Tabl-body" xml:lang="ru-RU">Приостановлен без возможности прерывания. Процесс ожидает завершения операции ввода/вывода, например, дисковым устройством</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1 cell-style-override-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">T</span></p>

</td>

      <td class="Cell-Style-1 cell-style-override-1">       <p class="Tabl-body" xml:lang="ru-RU">Остановлен. Процесс принудительно остановлен (подробнее об этом рассказывается ниже)</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1 cell-style-override-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">Z</span></p>

</td>

      <td class="Cell-Style-1 cell-style-override-1">       <p class="Tabl-body" xml:lang="ru-RU">Недействующий процесс-«зомби». Это дочерний процесс, который завершился, но не был удален родителем</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1 cell-style-override-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">&lt;</span></p>

</td>

      <td class="Cell-Style-1 cell-style-override-1">       <p class="Tabl-body" xml:lang="ru-RU">Высокоприоритетный процесс. Существует возможность наиболее важным процессам выделить больше процессорного времени. Данное свойство процесса называется <em>niceness</em> (уступчивость). Про процессы с более высокими приоритетами говорят, что они менее уступчивы, потому что потребляют больше процессорного времени, оставляя меньше другим процессам</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1 cell-style-override-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">N</span></p>

</td>

      <td class="Cell-Style-1 cell-style-override-1">       <p class="Tabl-body" xml:lang="ru-RU">Низкоприоритетный процесс. Процесс с низким приоритетом (или уступчивый процесс) получает процессорное время только после того, как будут обслужены процессы с более высоким приоритетом</p>

</td>

</tr>

</tbody>
    </table>

    <p class="No-Paragraph-Style"></p>

    <p xml:lang="ru-RU">Символ, описывающий состояние процесса, может сопровождаться другими символами. Они отражают некоторые экзотические характеристики процессов. За дополнительной информацией обращайтесь к странице справочного руководства (<span class="command char-style-override-1">man</span>) для <span class="command char-style-override-1">ps</span>.</p>

    <p xml:lang="ru-RU">Еще одна популярная комбинация параметров — <span class="command char-style-override-1">aux</span> (без дефиса в начале). Она позволяет получить еще больше информации:</p>

    <p class="list-first">[me@linuxbox ~]$ ps aux</p>

    <p class="listing-body">USER&#160;&#160;&#160;&#160;PID %CPU %MEM&#160;&#160;&#160;&#160;VSZ&#160;&#160;&#160;RSS TTY&#160;&#160;&#160;&#160;&#160;STAT START&#160;&#160;&#160;&#160;TIME COMMAND</p>

    <p class="listing-body">root&#160;&#160;&#160;&#160;&#160;&#160;1&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;&#160;2136&#160;&#160;&#160;644 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ss&#160;&#160;&#160;Mar05&#160;&#160;&#160;&#160;0:31 init</p>

    <p class="listing-body">root&#160;&#160;&#160;&#160;&#160;&#160;2&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;&#160;0 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;S&lt;&#160;&#160;&#160;Mar05&#160;&#160;&#160;&#160;0:00 [kt]</p>

    <p class="listing-body">root&#160;&#160;&#160;&#160;&#160;&#160;3&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;&#160;0 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;S&lt;&#160;&#160;&#160;Mar05&#160;&#160;&#160;&#160;0:00 [mi]</p>

    <p class="listing-body">root&#160;&#160;&#160;&#160;&#160;&#160;4&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;&#160;0 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;S&lt;&#160;&#160;&#160;Mar05&#160;&#160;&#160;&#160;0:00 [ks]</p>

    <p class="listing-body">root&#160;&#160;&#160;&#160;&#160;&#160;5&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;&#160;0 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;S&lt;&#160;&#160;&#160;Mar05&#160;&#160;&#160;&#160;0:06 [wa]</p>

    <p class="listing-body">root&#160;&#160;&#160;&#160;&#160;&#160;6&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;&#160;0 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;S&lt;&#160;&#160;&#160;Mar05&#160;&#160;&#160;&#160;0:36 [ev]</p>

    <p class="listing-body">root&#160;&#160;&#160;&#160;&#160;&#160;7&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;&#160;0 ?&#160;&#160;&#160;&#160;&#160;&#160;&#160;S&lt;&#160;&#160;&#160;Mar05&#160;&#160;&#160;&#160;0:00 [kh]</p>

    <p class="list-last">и еще много других процессов...</p>

    <p xml:lang="ru-RU">Эта комбинация параметров выводит процессы, принадлежащие всем пользователям. При использовании параметров без начального дефиса команда действует «в стиле BSD». Linux-версия команды <span class="command char-style-override-1">ps</span> может имитировать поведение программы <span class="command char-style-override-1">ps</span>, используемой в некоторых реализациях Unix. С помощью этих параметров мы получили дополнительные столбцы, описанные в табл. 10.2.</p>

    <p class="Tabl-head" xml:lang="ru-RU"><strong>Таблица 10.2.</strong> Заголовки столбцов при выполнении ps в стиле BSD</p>

    <table id="table-35" class="Table-Style-1">
      <colgroup>      <col/>

      <col/>

</colgroup>

      <tbody>      <tr>      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Заголовок</p>

</td>

      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Значение</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">USER</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Идентификатор пользователя. Это владелец процесса</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">%CPU</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Использование процессора в процентах</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">%MEM</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Использование памяти в процентах</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">VSZ</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Объем виртуальной памяти</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">RSS</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Размер страниц памяти. Объем физической памяти (ОЗУ), используемой процессом, кб</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">START</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Время запуска процесса. Для значений свыше 24 часов выводится дата</p>

</td>

</tr>

</tbody>
    </table>

    <p class="No-Paragraph-Style"></p>

    <h3 xml:lang="ru-RU">Просмотр состояния процессов в динамике с помощью top</h3>

    <p class="Normal0" xml:lang="ru-RU">Команда <span class="command char-style-override-1">ps</span> предоставляет массу информации о том, что делается в компьютере, но она дает только мгновенный снимок, то есть возвращаемая ею информация действительна лишь на момент вызова команды. Чтобы увидеть работу компьютера в динамике, воспользуемся командой <span class="command char-style-override-1">top</span>:</p>

    <p class="list-one">[me@linuxbox ~]$ <strong>top</strong></p>

    <p xml:lang="ru-RU">Программа <span class="command char-style-override-1">top</span> постоянно обновляет информацию о процессах (по умолчанию с периодом, равным 3 секундам), чтобы показать их активность с течением времени. Имя программы <span class="command char-style-override-1">top</span> отражает тот факт, что она используется для просмотра «топа» (наиболее активных) процессов в системе. Вывод команды <span class="command char-style-override-1">top</span> делится на две части: сводная информация о системе и таблица процессов, отсортированных по потреблению ими процессора:</p>

    <p class="list-first">top - 14:59:20 up 6:30,&#160;&#160;2 users,&#160;&#160;load average: 0.07, 0.02, 0.00</p>

    <p class="listing-body">Tasks: 109 total,&#160;&#160;1 running, 106 sleeping,&#160;&#160;&#160;0 stopped,&#160;&#160;&#160;2 zombie</p>

    <p class="listing-body">Cpu(s):&#160;&#160;0.7%us, 1.0%sy,&#160;&#160;0.0%ni, 98.3%id,&#160;&#160;0.0%wa,&#160;&#160;0.0%hi,&#160;&#160;0.0%si</p>

    <p class="listing-body">Mem:&#160;&#160;&#160;&#160;319496k total,&#160;&#160;314860k used,&#160;&#160;&#160;&#160;&#160;4636k free,&#160;&#160;&#160;&#160;19392k buff</p>

    <p class="listing-body">Swap:&#160;&#160;&#160;875500k total,&#160;&#160;149128k used,&#160;&#160;&#160;726372k free,&#160;&#160;&#160;114676k cach</p>

    <p class="listing-body">&#160;</p>

    <p class="listing-body">&#160;&#160;PID USER&#160;&#160;&#160;&#160;&#160;&#160;PR&#160;&#160;NI&#160;&#160;VIRT&#160;&#160;RES&#160;&#160;SHR S %CPU %MEM&#160;&#160;&#160;TIME+&#160;&#160;COMMAND</p>

    <p class="listing-body">6244 me&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;39&#160;&#160;19 31752 3124 2188 S&#160;&#160;6.3&#160;&#160;1.0 16:24.42 trackerd</p>

    <p class="listing-body">11071 me&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;20&#160;&#160;&#160;0&#160;&#160;2304 1092&#160;&#160;840 R&#160;&#160;1.3&#160;&#160;0.3&#160;&#160;0:00.14 top</p>

    <p class="listing-body">6180 me&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;20&#160;&#160;&#160;0&#160;&#160;2700 1100&#160;&#160;772 S&#160;&#160;0.7&#160;&#160;0.3&#160;&#160;0:03.66 dbus-dae</p>

    <p class="listing-body">6321 me&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;20&#160;&#160;&#160;0 20944 7248 6560 S&#160;&#160;0.7&#160;&#160;2.3&#160;&#160;2:51.38 multiloa</p>

    <p class="listing-body">4955 root&#160;&#160;&#160;&#160;&#160;&#160;20&#160;&#160;&#160;0&#160;&#160;104m 9668 5776 S&#160;&#160;0.3&#160;&#160;3.0&#160;&#160;2:19.39 Xorg</p>

    <p class="listing-body">&#160;&#160;&#160;&#160;1 root&#160;&#160;&#160;&#160;&#160;&#160;20&#160;&#160;&#160;0&#160;&#160;2976&#160;&#160;528&#160;&#160;476 S&#160;&#160;0.0&#160;&#160;0.2&#160;&#160;0:03.14 init</p>

    <p class="listing-body">&#160;&#160;&#160;&#160;2 root&#160;&#160;&#160;&#160;&#160;&#160;15&#160;&#160;-5&#160;&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0 S&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;0:00.00 kthreadd</p>

    <p class="listing-body">&#160;&#160;&#160;&#160;3 root&#160;&#160;&#160;&#160;&#160;&#160;RT&#160;&#160;-5&#160;&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0 S&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;0:00.00 migratio</p>

    <p class="listing-body">&#160;&#160;&#160;&#160;4 root&#160;&#160;&#160;&#160;&#160;&#160;15&#160;&#160;-5&#160;&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0 S&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;0:00.72 ksoftirq</p>

    <p class="listing-body">&#160;&#160;&#160;&#160;5 root&#160;&#160;&#160;&#160;&#160;&#160;RT&#160;&#160;-5&#160;&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0 S&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;0:00.04 watchdog</p>

    <p class="listing-body">&#160;&#160;&#160;&#160;6 root&#160;&#160;&#160;&#160;&#160;&#160;15&#160;&#160;-5&#160;&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0 S&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;0:00.42 events/0</p>

    <p class="listing-body">&#160;&#160;&#160;&#160;7 root&#160;&#160;&#160;&#160;&#160;&#160;15&#160;&#160;-5&#160;&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0 S&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;0:00.06 khelper</p>

    <p class="listing-body">&#160;&#160;&#160;41 root&#160;&#160;&#160;&#160;&#160;&#160;15&#160;&#160;-5&#160;&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0 S&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;0:01.08 kblockd/</p>

    <p class="listing-body">&#160;&#160;&#160;67 root&#160;&#160;&#160;&#160;&#160;&#160;15&#160;&#160;-5&#160;&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0 S&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;0:00.00 kseriod</p>

    <p class="listing-body">&#160;&#160;114 root&#160;&#160;&#160;&#160;&#160;&#160;20&#160;&#160;&#160;0&#160;&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0 S&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;0:01.62 pdflush</p>

    <p class="list-last">&#160;&#160;116 root&#160;&#160;&#160;&#160;&#160;&#160;15&#160;&#160;-5&#160;&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0&#160;&#160;&#160;&#160;0 S&#160;&#160;0.0&#160;&#160;0.0&#160;&#160;0:02.44 kswapd0</p>

    <p xml:lang="ru-RU">Раздел со сводной информацией содержит массу интересных сведений. Описание выводимой в этом разделе информации приводится в табл. 10.3.</p>

    <p class="Tabl-head" xml:lang="ru-RU"><strong>Таблица 10.3.</strong> Поля в разделе со сводной информацией команды top</p>

    <table id="table-36" class="Table-Style-1">
      <colgroup>      <col/>

      <col/>

      <col/>

</colgroup>

      <thead>      <tr>      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Строка</p>

</td>

      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Поле</p>

</td>

      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Значение</p>

</td>

</tr>

</thead>

      <tbody>      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">1</p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">top</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Имя программы</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">&#160;</p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">14:59:20</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Текущее время</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">&#160;</p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">up 6:30</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Это поле называется <em>uptime</em> (продолжительность работы). Показывает время, прошедшее с момента последней загрузки системы. В данном примере система проработала 6½ часа</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">&#160;</p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">2 users</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">В системе работают два пользователя</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU">&#160;</p>

</td>

      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">load average:</span></p>

</td>

      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU">Средняя нагрузка (load average) — это число процессов, ожидающих возобновления работы; то есть число процессов, находящихся в состоянии «выполняется» и совместно использующих процессор. Здесь показаны три значения для разных интервалов времени. Первое значение отражает среднюю нагрузку за последние 60 секунд, второе&#160;&#160;— за последние 5 минут и третье — за последние 15 минут. Значения ниже 1.0 сообщают, что система не нагружена</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU">2</p>

</td>

      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">Tasks:</span></p>

</td>

      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU">Суммарное число процессов в разных состояниях</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU">&#160;</p>

</td>

      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">0.7%us</span></p>

</td>

      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU">0,7% процессорного времени затрачено на выполнение <em>пользовательских</em> (user) процессов. Под этим подразумеваются процессы за пределами самого ядра</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU">&#160;</p>

</td>

      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">1.0%sy</span></p>

</td>

      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU">1,0% процессорного времени затрачено на выполнение <em>системных</em> (system) процессов (ядра)</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU">&#160;</p>

</td>

      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">0.0%ni</span></p>

</td>

      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU">0,0% процессорного времени затрачено на выполнение уступчивых (nice), то есть низкоприоритетных, процессов</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU">&#160;</p>

</td>

      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">98.3%id</span></p>

</td>

      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU">1,0% процессорного времени составили простои</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU">4</p>

</td>

      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">Mem:</span></p>

</td>

      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU">Объем использованной физической памяти (ОЗУ)</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU">5</p>

</td>

      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">Swap:</span></p>

</td>

      <td class="Cell-Style-1 cell-style-override-6">       <p class="Tabl-body" xml:lang="ru-RU">Объем использованного пространства в файле подкачки (виртуальная память)</p>

</td>

</tr>

</tbody>
    </table>

    <p class="No-Paragraph-Style"></p>

    <p xml:lang="ru-RU">Программа <span class="command char-style-override-1">top</span> принимает ряд команд с клавиатуры. Наибольший интерес представляет команда <span class="command char-style-override-1">h</span>, которая выводит экран со справочной информацией, и <span class="command char-style-override-1">q</span>, которая завершает <span class="command char-style-override-1">top</span>.</p>

    <p xml:lang="ru-RU">Оба основных окружения рабочего стола включают приложения с графическим интерфейсом, отображающие аналогичную информацию (подобно тому, как это делает <span class="interface char-style-override-2">Task Manager</span> (Диспетчер задач) в Windows), но я считаю, что <span class="command char-style-override-1">top</span> лучше своих аналогов с графическим интерфейсом, потому что она работает быстрее и потребляет меньше системных ресурсов. В конце концов, программа мониторинга системы не должна замедлять систему, за которой мы наблюдаем.</p>

    <h2 id="toc_marker-13-2" xml:lang="ru-RU">Управление процессами</h2>

    <p class="Normal0" xml:lang="ru-RU">Теперь, когда мы можем видеть процессы и наблюдать за ними, можно приступать к управлению ими. Роль подопытной морской свинки в наших экспериментах исполнит маленькая программка <span class="command char-style-override-1">xlogo</span>. Программа <span class="command char-style-override-1">xlogo</span> — это демонстрационная программа, поставляемая в составе X Window System (механизм создания графического изображения на дисплее), которая просто отображает окно с логотипом X. Для начала давайте познакомимся с объектом экспериментов:</p>

    <p class="list-one">[me@linuxbox ~]$ <strong>xlogo</strong></p>

    <p xml:lang="ru-RU">После ввода команды на экране должно появиться небольшое окно с логотипом. В некоторых системах <span class="command char-style-override-1">xlogo</span> может выводить предупреждающее сообщение, но его можно смело игнорировать.</p>

    <p class="Vrezka-head" xml:lang="ru-RU">ПРИМЕЧАНИЕ</p>

    <p class="Vrezka-body" xml:lang="ru-RU">Если программа <span class="command char-style-override-1">xlogo</span> отсутствует в системе, попробуйте вместо нее использовать <span class="command char-style-override-1">gedit</span> или <span class="command char-style-override-1">kwrite</span>.</p>

    <p xml:lang="ru-RU">Чтобы убедиться, что <span class="command char-style-override-1">xlogo</span> работает, попробуйте изменить размеры ее окна. Если после изменения размеров содержимое окна перерисовывается, значит, программа работает.</p>

    <p xml:lang="ru-RU">Заметили ли вы, что командная оболочка не вывела приглашения к вводу после выполнения команды? Это объясняется тем, что командная оболочка ждет, пока программа завершится. То же самое происходило со всеми программами, которые мы запускали до сих пор. Если закрыть окно <span class="command char-style-override-1">xlogo</span>, оболочка выведет приглашение к вводу.</p>

    <h3 xml:lang="ru-RU">Прерывание процесса</h3>

    <p class="Normal0" xml:lang="ru-RU">Давайте понаблюдаем, что происходит после запуска <span class="command char-style-override-1">xlogo</span>. Сначала введите коман­ду <span class="command char-style-override-1">xlogo</span> и убедитесь, что программа работает. Затем вернитесь в окно терминала и нажмите комбинацию <span class="interface char-style-override-2">CTRL+C</span>.</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>xlogo</strong></p>

    <p class="list-last">[me@linuxbox ~]$</p>

    <p xml:lang="ru-RU">Комбинация <span class="interface char-style-override-2">CTRL+C</span> в терминале прерывает выполнение программы. Фактически мы вежливо попросили программу завершиться. После нажатия <span class="interface char-style-override-2">CTRL+C</span> окно <span class="command char-style-override-1">xlogo</span> закроется и командная оболочка выведет приглашение к вводу.</p>

    <p xml:lang="ru-RU">Таким способом можно прервать выполнение многих (но не всех) программ команд­ной строки.</p>

    <h3 xml:lang="ru-RU">Перевод процессов в фоновый режим</h3>

    <p class="Normal0" xml:lang="ru-RU">Представьте, что нам потребовалось вернуться в командную оболочку, не прерывая выполнения программы <span class="command char-style-override-1">xlogo</span>. Мы можем сделать это, переведя программу в фоновый режим работы. Считайте, что терминал имеет <em>передний план</em> (то, что видно на поверхности, например приглашение к вводу) и <em>задний план</em> (<em>фон</em>, то, что скрыто под поверхностью). Чтобы запустить программу сразу в фоновом режиме, нужно добавить в конец команды символ амперсанда (<span class="command char-style-override-1">&amp;</span>):</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>xlogo &amp;</strong></p>

    <p class="listing-body">[1] 28236</p>

    <p class="list-last">[me@linuxbox ~]$</p>

    <p xml:lang="ru-RU">После ввода такой команды на экране появится окно <span class="command char-style-override-1">xlogo</span>, а командная оболочка вернется в приглашение к вводу, но перед этим выведет таинственные числа. Это сообщение является частью механизма <em>управления заданиями</em> (job control). Таким способом командная оболочка сообщает, что мы запустили задание с номером 1 (<span class="command char-style-override-1">[1]</span>) и оно получило идентификатор процесса PID 28236. Если теперь выполнить команду <span class="command char-style-override-1">ps</span>, можно увидеть этот процесс:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>ps</strong></p>

    <p class="listing-body">&#160;&#160;PID TTY&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;TIME CMD</p>

    <p class="listing-body">10603 pts/1&#160;&#160;&#160;&#160;00:00:00 bash</p>

    <p class="listing-body">28236 pts/1&#160;&#160;&#160;&#160;00:00:00 xlogo</p>

    <p class="list-last">28239 pts/1&#160;&#160;&#160;&#160;00:00:00 ps</p>

    <p xml:lang="ru-RU">Механизм управления заданиями также дает возможность вывести список заданий, запущенных в терминале. Этот список можно получить командой <span class="command char-style-override-1">jobs</span>:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>jobs</strong></p>

    <p class="list-last">[1]+ Running&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xlogo &amp;</p>

    <p xml:lang="ru-RU">Результаты показывают, что у нас имеется одно выполняющееся задание с номером 1, которое было запущено командой <span class="command char-style-override-1">xlogo &amp;</span>.</p>

    <h3 xml:lang="ru-RU">Возврат процесса на передний план</h3>

    <p class="Normal0" xml:lang="ru-RU">Процесс в фоновом режиме не получает ввод с клавиатуры, в том числе не видит попыток прервать его комбинацией <span class="interface char-style-override-2">CTRL+C</span>. Вернуть процесс на передний план можно командой <span class="command char-style-override-1">fg</span>, как в следующем примере:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>jobs</strong></p>

    <p class="listing-body">[1]+ Running xlogo &amp;</p>

    <p class="listing-body">[me@linuxbox ~]$ <strong>fg %1</strong></p>

    <p class="list-last">xlogo</p>

    <p xml:lang="ru-RU">За командой <span class="command char-style-override-1">fg</span> должен следовать знак процента и номер задания (эта комбинация называется <em>спецификатором задания</em>, или <em>jobspec</em>). Если имеется только одно фоновое задание, спецификатор можно опустить. Теперь завершим <span class="command char-style-override-1">xlogo</span> вводом <span class="interface char-style-override-2">CTRL+C</span>.</p>

    <h3 xml:lang="ru-RU">Приостановка процесса</h3>

    <p class="Normal0" xml:lang="ru-RU">Иногда необходимо приостановить процесс на время, не завершая его. Это часто делается с целью перевести процесс переднего плана в фоновый режим. Чтобы приостановить процесс переднего плана, используйте комбинацию <span class="interface char-style-override-2">CTRL+Z</span>. Давайте попробуем. В командной строке введите команду <span class="command char-style-override-1">xlogo</span>, нажмите <span class="interface char-style-override-2">ENTER</span>, а затем комбинацию <span class="interface char-style-override-2">CTRL+Z</span>:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>xlogo</strong></p>

    <p class="listing-body">[1]+ Stopped xlogo</p>

    <p class="list-last">[me@linuxbox ~]$</p>

    <p xml:lang="ru-RU">После приостановки <span class="command char-style-override-1">xlogo</span> убедимся, что программа действительно приостановилась, для этого попытаемся изменить размер окна <span class="command char-style-override-1">xlogo</span>. Увы, программа никак не реагирует на наши действия. Далее можно или вернуть программу на передний план командой <span class="command char-style-override-1">fg</span>, или перевести ее в фоновый режим командой <span class="command char-style-override-1">bg</span>:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>bg %1</strong></p>

    <p class="listing-body">[1]+ xlogo &amp;</p>

    <p class="list-last">[me@linuxbox ~]$</p>

    <p xml:lang="ru-RU">Так же как в случае с командой <span class="command char-style-override-1">fg</span>, спецификатор задания можно опустить, если имеется только одно задание.</p>

    <p xml:lang="ru-RU">Возможность перевода в фоновый режим полезна и в том случае, если при запуске программы с графическим интерфейсом из командной строки вы забыли добавить в конец команды символ <span class="command char-style-override-1">&amp;</span>.</p>

    <p xml:lang="ru-RU">Зачем может понадобиться запускать программу с графическим интерфейсом из командной строки? Тому есть две причины. Во-первых, необходимая программа может отсутствовать в меню программ окружения рабочего стола (как, например, <span class="command char-style-override-1">xlogo</span>).</p>

    <p xml:lang="ru-RU">Во-вторых, запуская программу из командной строки, можно увидеть сообщения об ошибках, которые невидимы, когда программа запускается из графического интерфейса. Иногда программа аварийно завершается при запуске из графического меню. В этом случае, запуская ее из командной строки, можно по сообщениям об ошибках понять причину аварии. Кроме того, некоторые программы с графическим интерфейсом имеют интересные параметры командной строки.</p>

    <h2 id="toc_marker-13-3" xml:lang="ru-RU">Сигналы</h2>

    <p class="Normal0" xml:lang="ru-RU">Команда <span class="command char-style-override-1">kill</span> используется для «убийства» (kill), то есть для завершения процессов. Она позволяет принудительно завершить выполнение вышедшей из-под контроля программы, отвергающей любые другие попытки закрыть ее. Например:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>xlogo &amp;</strong></p>

    <p class="listing-body">[1] 28401</p>

    <p class="listing-body">[me@linuxbox ~]$ <strong>kill 28401</strong></p>

    <p class="list-last">[1]+ Terminated xlogo</p>

    <p xml:lang="ru-RU">В этом случае сначала выполняется запуск программы <span class="command char-style-override-1">xlogo</span> в фоновом режиме. В ответ командная оболочка выводит номер задания и идентификатор фонового процесса (PID). Далее вызывается команда <span class="command char-style-override-1">kill</span>, которой передается PID процесса, требующего завершения. Процесс можно также идентифицировать, указав спецификатор задания (например, <span class="command char-style-override-1">%1</span>) вместо PID.</p>

    <p xml:lang="ru-RU">Хотя все выглядит достаточно просто, в действительности команда <span class="command char-style-override-1">kill</span> не просто «убивает» (kill) процессы — она посылает им <em>сигналы</em>. Сигналы — один из нескольких способов, которыми операционная система общается с программами. Мы уже видели сигналы в действии на примере использования комбинаций клавиш <span class="interface char-style-override-2">CTRL+C</span> и <span class="interface char-style-override-2">CTRL+Z</span>. Когда терминал принимает одну из этих комбинаций, он посылает сигнал программе на переднем плане. В случае нажатия <span class="interface char-style-override-2">CTRL+C</span> программе посылается сигнал <span class="command char-style-override-1">INT</span> (Interrupt — прервать); в случае нажатия <span class="interface char-style-override-2">CTRL+Z</span> посылается сигнал <span class="command char-style-override-1">TSTP</span> (Terminal Stop — сигнал «стоп» с клавиатуры). Программы в свою очередь, принимают сигналы и могут реагировать на них. Эта возможность позволяет программе выполнить некоторые операции, например сохранить промежуточные результаты, при получении сигнала на завершение.</p>

    <h3 xml:lang="ru-RU">Посылка сигналов процессам командой kill</h3>

    <p class="Normal0" xml:lang="ru-RU">Наиболее типичный синтаксис команды <span class="command char-style-override-1">kill</span> имеет следующий вид:</p>

    <p class="list-one">kill [-<em>сигнал</em>] PID...</p>

    <p xml:lang="ru-RU">Если <em>сигнал</em> явно не указан в команде, по умолчанию посылается сигнал <span class="command char-style-override-1">TERM</span> (terminate — завершить). Команда <span class="command char-style-override-1">kill</span> чаще всего используется для посылки сигналов, перечисленных в табл. 10.4.</p>

    <p class="Tabl-head" xml:lang="ru-RU"><strong>Таблица 10.4.</strong> Часто используемые сигналы</p>

    <table id="table-37" class="Table-Style-1">
      <colgroup>      <col/>

      <col/>

      <col/>

</colgroup>

      <thead>      <tr>      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Номер</p>

</td>

      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Имя</p>

</td>

      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Значение</p>

</td>

</tr>

</thead>

      <tbody>      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">1</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">HUP</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Обрыв связи. Это пережиток старых добрых времен, когда терминалы подключались к удаленным компьютерам посредством телефонных линий и модемов. Этот сигнал используется, чтобы подсказать программе, что потеряна связь с управляющим терминалом. Действие этого сигнала можно продемонстрировать, закрыв окно терминала. Программа переднего плана, запущенная в терминале, получит сигнал и завершится.</p>

      <p class="Tabl-body" xml:lang="ru-RU">Этот сигнал также используется многими программами-демонами для повторной инициализации. То есть когда программа-демон получает этот сигнал, она перезапускается и повторно читает свои конфигурационные файлы. Веб-сервер Apache, например, как раз такая программа-демон, она именно так реагирует на сигнал <span class="command char-style-override-4">HUP</span></p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">2</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">INT</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Прервать. Выполняет ту же функцию, что и нажатие комбинации <span class="interface char-style-override-5">CTRL+C</span> в терминале. Обычно приводит к завершению программы</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">9</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">KILL</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Уничтожить. Это специальный сигнал. В большинстве случаев программы могут сами решать, как реагировать на сигналы, вплоть до полного их игнорирования, но сигнал <span class="command char-style-override-4">KILL</span> в действительности никогда не передается целевой программе. Вместо этого ядро немедленно завершает указанный процесс. Когда процесс завершается таким способом, он не имеет возможности «прибрать за собой» или сохранить результаты своей работы. По этой причине сигнал <span class="command char-style-override-4">KILL</span> следует использовать только как крайнее средство, когда другие сигналы на завершение программы не приводят к желаемому результату</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">15</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">TERM</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Завершить. Это сигнал по умолчанию, посылаемый командой <span class="command char-style-override-4">kill</span>. Если <span>программа достаточно «живая», чтобы принять этот сигнал, она завершит</span>ся</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">18</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">CONT</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Продолжить. Этот сигнал восстанавливает нормальную работу процесса после сигнала <span class="command char-style-override-4">STOP</span></p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">19</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">STOP</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Приостановить. Этот сигнал заставляет процесс приостановиться, не завершаясь. Подобно сигналу <span class="command char-style-override-4">KILL</span>, он не передается целевому процессу и потому не может быть проигнорирован им</p>

</td>

</tr>

</tbody>
    </table>

    <p class="No-Paragraph-Style"></p>

    <p xml:lang="ru-RU">Поэкспериментируем с командой <span class="command char-style-override-1">kill</span>:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>xlogo &amp;</strong></p>

    <p class="listing-body">[1] 13546</p>

    <p class="listing-body">[me@linuxbox ~]$ <strong>kill -1 13546</strong></p>

    <p class="list-last">[1]+ Hangup xlogo</p>

    <p xml:lang="ru-RU">Здесь мы запустили программу <span class="command char-style-override-1">xlogo</span> в фоновом режиме и затем с помощью коман­ды <span class="command char-style-override-1">kill</span> послали ей сигнал <span class="command char-style-override-1">HUP</span>. Программа <span class="command char-style-override-1">xlogo</span> завершилась, и командная оболочка сообщила, что фоновый процесс принял сигнал разрыва связи. Иногда необходимо нажать клавишу <span class="interface char-style-override-2">ENTER</span> пару раз, чтобы увидеть сообщение. Обратите внимание, что сигнал можно указать по номеру или по имени, включая имена сигналов, начинающиеся с префикса <span class="command char-style-override-1">SIG</span>:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>xlogo &amp;</strong></p>

    <p class="listing-body">[1] 13601</p>

    <p class="listing-body">[me@linuxbox ~]$ <strong>kill -INT 13601</strong></p>

    <p class="listing-body">[1]+ Interrupt xlogo</p>

    <p class="listing-body">[me@linuxbox ~]$ <strong>xlogo &amp;</strong></p>

    <p class="listing-body">[1] 13608</p>

    <p class="listing-body">[me@linuxbox ~]$ <strong>kill -SIGINT 13608</strong></p>

    <p class="list-last">[1]+ Interrupt xlogo</p>

    <p xml:lang="ru-RU">Повторите пример, приведенный выше, и попробуйте послать другие сигналы. Имейте в виду, что вместо PID можно также передавать спецификатор задания.</p>

    <p xml:lang="ru-RU">Процессы, подобно файлам, имеют владельцев, и чтобы послать сигнал процессу командой <span class="command char-style-override-1">kill</span>, вы должны быть владельцем процесса (или суперпользователем).</p>

    <p xml:lang="ru-RU">Помимо сигналов, наиболее часто используемых с командой <span class="command char-style-override-1">kill</span> и перечисленных в табл. 10.4, система часто использует другие сигналы, перечисленные в табл. 10.5.</p>

    <p class="Tabl-head" xml:lang="ru-RU"><strong>Таблица 10.5.</strong> Другие часто используемые сигналы</p>

    <table id="table-38" class="Table-Style-1">
      <colgroup>      <col/>

      <col/>

      <col/>

</colgroup>

      <tbody>      <tr>      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Номер</p>

</td>

      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Имя</p>

</td>

      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Значение</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">3</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">QUIT</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Выйти</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">11</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">SEGV</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Ошибка сегментации. Этот сигнал посылается программе, предпринявшей попытку недопустимого обращения к памяти, то есть попытку выполнить запись в память, доступ к которой запрещен</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">20</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">TSTP</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Сигнал «стоп» с клавиатуры. Этот сигнал посылается терминалом после нажатия комбинации <span class="interface char-style-override-5">CTRL+Z</span>. В отличие от сигнала <span class="command char-style-override-4">STOP</span>, <span class="command char-style-override-4">TSTP</span> передается программе, и программа может решить игнорировать его</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">28</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">WINCH</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Изменение окна. Этот сигнал посылается системой при изменении размеров окна терминала. Некоторые программы, такие как <span class="command char-style-override-4">top</span> и <span class="command char-style-override-4">less</span>, реагируют на этот сигнал, обновляя свой вывод в соответствии с новыми размерами окна терминала</p>

</td>

</tr>

</tbody>
    </table>

    <p class="No-Paragraph-Style"></p>

    <p xml:lang="ru-RU">Любопытные пользователи могут получить полный список сигналов, выполнив следующую команду:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>kill -l</strong></p>

    <h3 xml:lang="ru-RU">Посылка сигналов нескольким процессам с помощью killall</h3>

    <p class="Normal0" xml:lang="ru-RU">Кроме того, существует возможность с помощью команды <span class="command char-style-override-1">killall</span> послать сигнал сразу нескольким процессам, соответствующим указанной программе или имени пользователя. Она имеет следующий синтаксис:</p>

    <p class="list-one">killall [-u <em>пользователь</em>] [-<em>сигнал</em>] <em>имя</em>...</p>

    <p xml:lang="ru-RU">Для демонстрации запустим пару экземпляров программы <span class="command char-style-override-1">xlogo</span> и затем завершим их:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>xlogo &amp;</strong></p>

    <p class="listing-body">[1] 18801</p>

    <p class="listing-body">[me@linuxbox ~]$ <strong>xlogo &amp;</strong></p>

    <p class="listing-body">[2] 18802</p>

    <p class="listing-body">[me@linuxbox ~]$ <strong>killall xlogo</strong></p>

    <p class="listing-body">[1]- Terminated xlogo</p>

    <p class="list-last">[2]+ Terminated xlogo</p>

    <p xml:lang="ru-RU">Помните: так же как при использовании команды <span class="command char-style-override-1">kill</span>, вы должны обладать привилегиями суперпользователя, чтобы посылать сигналы процессам, которыми не владеете.</p>

    <h2 id="toc_marker-13-4" xml:lang="ru-RU">Другие команды управления процессами</h2>

    <p class="Normal0" xml:lang="ru-RU">Так как мониторинг процессов является одной из важнейших задач системного администрирования, существует множество команд, помогающих в этом. В табл. 10.6 перечислены некоторые из них, с ними вы можете поэкспериментировать.</p>

    <p class="Tabl-head" xml:lang="ru-RU"><strong>Таблица 10.6.</strong> Другие команды управления процессами</p>

    <table id="table-39" class="Table-Style-1">
      <colgroup>      <col/>

      <col/>

</colgroup>

      <tbody>      <tr>      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Команда</p>

</td>

      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Описание</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">pstree</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Выводит список процессов в виде древовидной структуры, отражающей отношения «родитель—потомок» между процессами</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">vmstat</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Выводит мгновенный снимок с информацией об использовании системных ресурсов, включая память, файл подкачки и объем дискового ввода/вывода. Чтобы увидеть, как изменяется эта информация с течением времени, передайте команде интервал задержки (в секундах) между обновлениями (например, <span class="command char-style-override-4">vmstat 5</span>). Завершить работу команды можно нажатием <span class="interface char-style-override-5">CTRL+C</span></p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">xload</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Программа с графическим интерфейсом, показывающая изменение нагрузки на систему с течением времени</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">tload</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Работает подобно программе <span class="command char-style-override-4">xload</span>, но рисует график в терминале. Завершается работа команды нажатием <span class="interface char-style-override-5">CTRL+C</span></p>

</td>

</tr>

</tbody>
    </table>

    <p class="No-Paragraph-Style"></p>

    <p xml:lang="ru-RU">&#160;</p>
  </div>
</body>
</html>