<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Командная строка Linux</title>
  <link href="../Styles/template.css" rel="stylesheet" type="text/css"/>
</head>

<body id="x978549602303" xml:lang="en-US">
  <div class="Basic-Text-Frame">
     <h1 id="toc_marker-10" xml:lang="ru-RU">7. Взгляд на мир глазами командной оболочки</h1>

    <p class="Normal0" xml:lang="ru-RU">В этой главе мы посмотрим, что происходит в командной строке после нажатия клавиши <span class="interface char-style-override-2">ENTER</span>. И в процессе исследования некоторых интересных и сложных механизмов командной оболочки мы будем пользоваться только одной новой ­командой:</p>

    <p class="ListBul" xml:lang="ru-RU"><span class="command char-style-override-1">• echo</span> — выводит строку текста.</p>

    <h2 id="toc_marker-10-1" xml:lang="ru-RU">Подстановка</h2>

    <p class="Normal0" xml:lang="ru-RU">Каждый раз, когда вы вводите команду и нажимаете <span class="interface char-style-override-2">ENTER</span>, <span class="command char-style-override-1">bash</span> выполняет несколько операций с текстом, прежде чем выполнит вашу команду. Мы уже видели пару примеров, где простая последовательность символов, например <span class="command char-style-override-1">*</span>, может много значить для командной оболочки. Процесс, который происходит при этом, называется <em>подстановкой</em> (expansion). То есть вы вводите что-то, и это что-то замещается чем-то другим, прежде чем командная оболочка продолжит обработку. Чтобы показать, что все это значит, возьмем для примера команду <span class="command char-style-override-1">echo</span> — встроенную команду, выполняющую очень простую операцию: она выводит свои текстовые аргументы в стандартный поток вывода.</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo this is a test</strong></p>

    <p class="list-last">this is a test</p>

    <p xml:lang="ru-RU">Все очень просто. <span class="command char-style-override-1">echo</span> выведет любой свой аргумент. Давайте попробуем другой пример:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo *</strong></p>

    <p class="list-last">Desktop Documents ls-output.txt Music Pictures Public Templates Videos</p>

    <p xml:lang="ru-RU">Что это? Почему <span class="command char-style-override-1">echo</span> не вывела символ <span class="command char-style-override-1">*</span>? Как вы помните из опытов с групповыми символами, символ <span class="command char-style-override-1">*</span> означает «последовательность любых символов в имени файла», правда, в том обсуждении не рассказывалось, как командная оболочка делает это. На самом деле все просто: перед тем, как выполнить команду <span class="command char-style-override-1">echo</span>, оболочка замещает символ <span class="command char-style-override-1">*</span> чем-то другим (в данном случае именами файлов в текущем рабочем каталоге). После нажатия клавиши <span class="interface char-style-override-2">ENTER</span> командная оболочка автоматически производит подстановку любых условных символов в командной строке, прежде чем выполнить ее, поэтому команда <span class="command char-style-override-1">echo</span> не увидела <span class="command char-style-override-1">*</span> — она получила уже готовый результат подстановки. Теперь вы понимаете, что в действительности <span class="command char-style-override-1">echo</span> действует в точности с нашими ожиданиями?</p>

    <h3 xml:lang="ru-RU">Подстановка путей</h3>

    <p class="Normal0" xml:lang="ru-RU">Механизм работы групповых символов называется <em>подстановкой пути</em> (pathname expansion). Если вернуться к некоторым приемам, продемонстрированным в предыдущих главах, мы увидим, что в действительности они основаны на подстановке. Допустим, содержимое домашнего каталога выглядит вот так:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>ls</strong></p>

    <p class="listing-body">Desktop&#160;&#160;&#160;&#160;ls-output.txt&#160;&#160;Pictures&#160;&#160;Templates</p>

    <p class="list-last">Documents&#160;&#160;Music&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Public&#160;&#160;&#160;&#160;Videos</p>

    <p xml:lang="ru-RU">Мы могли бы выполнить следующую подстановку:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo D*</strong></p>

    <p class="list-last">Desktop Documents</p>

    <p xml:lang="ru-RU">или</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo *s</strong></p>

    <p class="list-last">Documents Pictures Templates Videos</p>

    <p xml:lang="ru-RU">или даже</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo [[:upper:]]*</strong></p>

    <p class="list-last">Desktop Documents Music Pictures Public Templates Videos</p>

    <p xml:lang="ru-RU">И заглянуть за пределы домашнего каталога:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo /usr/*/share</strong></p>

    <p class="listing-body">/usr/kerberos/share /usr/local/share</p>

    <h3 xml:lang="ru-RU">Подстановка тильды</h3>

    <p class="Normal0" xml:lang="ru-RU">Как вы помните из вводного обсуждения команды <span class="command char-style-override-1">cd</span>, символ тильды (<span class="command char-style-override-1">~</span>) имеет специальное значение. Если он используется в начале слова, то замещается именем домашнего каталога указанного пользователя или, если пользователь не указан, именем домашнего каталога текущего пользователя:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo ~</strong></p>

    <p class="list-last">/home/me</p>

    <p xml:lang="ru-RU">Если в системе существует учетная запись пользователя <em>foo</em>, тогда</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo ~foo</strong></p>

    <p class="listing-body">/home/foo</p>

    <p class="Vrezka-head" xml:lang="ru-RU">подстановка пути для скрытых файлов</p>

    <p class="Vrezka-body" xml:lang="ru-RU">Как мы знаем, файлы с именами, начинающимися с точки, считаются скрытыми. Механизм подстановки пути также учитывает это. Подстановка, такая как</p>

    <p class="vrezka-listing"><span class="command char-style-override-7">echo *</span></p>

    <p class="Vrezka-body" xml:lang="ru-RU">не покажет скрытые файлы.</p>

    <p class="Vrezka-body" xml:lang="ru-RU">На первый взгляд кажется, что можно было бы включить скрытые файлы в подстановку, добавив в начало шаблона символ точки, например:</p>

    <p class="vrezka-listing"><span class="command char-style-override-7">echo .*</span></p>

    <p class="Vrezka-body" xml:lang="ru-RU">Да, такой подход даст желаемое. Однако, если внимательно исследовать результаты, можно заметить, что в них также присутствуют имена <span class="command char-style-override-1">.</span> (точка) и <span class="command char-style-override-1">..</span> (две точки). Так как эти имена соответствуют текущему рабочему каталогу и родительскому каталогу, применение такого шаблона может привести к неправильным результатам. Убедимся в этом с помощью команды</p>

    <p class="vrezka-listing"><span class="command char-style-override-7">ls -d .* | less</span></p>

    <p class="Vrezka-body" xml:lang="ru-RU">Чтобы обеспечить правильную подстановку пути в такой ситуации, следует использовать специализированный шаблон. Следующий шаблон действует правильно:</p>

    <p class="vrezka-listing"><span class="command char-style-override-7">ls -d .[!.]?*</span></p>

    <p class="Vrezka-body-Last" xml:lang="ru-RU">Этот шаблон замещается именами файлов, начинающимися с точки, за которой следует хотя бы один символ, кроме точки, за которым в свою очередь может следовать любое количество других символов.</p>

    <h3 xml:lang="ru-RU">Подстановка результатов арифметических выражений</h3>

    <p class="Normal0" xml:lang="ru-RU">Командная оболочка поддерживает также подстановку результатов арифметических выражений. Это позволяет использовать командную строку как калькулятор:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo $((2 + 2))</strong></p>

    <p class="list-last">4</p>

    <p xml:lang="ru-RU">Для подстановки арифметических выражений используется следующий формат:</p>

    <p class="list-one">$((<em>выражение</em>))</p>

    <p xml:lang="ru-RU">где <em>выражение</em> — это арифметическое выражение, состоящее из значений и арифметических операторов.</p>

    <p xml:lang="ru-RU">Механизм подстановки арифметических выражений позволяет использовать только целые числа (невещественные), зато поддерживает множество арифметических операций. В табл. 7.1 перечислены некоторые из поддерживаемых операторов.</p>

    <p class="Tabl-head" xml:lang="ru-RU"><strong>Таблица 7.1.</strong> Арифметические операторы</p>

    <table id="table-17" class="Table-Style-1">
      <colgroup>      <col/>

      <col/>

</colgroup>

      <tbody>      <tr>      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Оператор</p>

</td>

      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Описание</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">+</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Сложение</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">-</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Вычитание</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">*</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Умножение</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">/</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Деление (но помните: из-за того, что подстановка поддерживает только целочисленную арифметику, результатом будет целое число)</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">%</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Деление по модулю или остаток от деления</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">**</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Возведение в степень</p>

</td>

</tr>

</tbody>
    </table>

    <p class="No-Paragraph-Style"></p>

    <p xml:lang="ru-RU">Пробелы в арифметических выражениях не играют роли, а выражения могут содержать вложенные выражения. Например, умножение 5<span class="Superscript char-style-override-3">2</span> на 3:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo $(($((5**2)) * 3))</strong></p>

    <p class="list-last">75</p>

    <p xml:lang="ru-RU">Для группировки подвыражений допускается использование одиночных круглых скобок. С помощью этого приема выражение, приведенное выше, можно переписать, как показано ниже, и получить тот же результат, но при этом будет использоваться одна операция подстановки вместо двух:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo $(((5**2) * 3))</strong></p>

    <p class="list-last">75</p>

    <p xml:lang="ru-RU">Следующий пример демонстрирует использование операторов деления и получения остатка. Обратите внимание, как действует целочисленное деление:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo Пять разделить на два будет $((5/2))</strong></p>

    <p class="listing-body">Пять разделить на два будет 2</p>

    <p class="listing-body">[me@linuxbox ~]$ <strong>echo и $((5%2)) в остатке.</strong></p>

    <p class="list-last">и 1 в остатке.</p>

    <p xml:lang="ru-RU">Подстановка результатов арифметических выражений подробнее будет рассматриваться в главе 34.</p>

    <h3 xml:lang="ru-RU">Подстановка фигурных скобок</h3>

    <p class="Normal0" xml:lang="ru-RU">Самым малопонятным, пожалуй, выглядит результат подстановки фигурных скобок. С помощью этого механизма из одного шаблона, содержащего фигурные скобки, создается множество текстовых строк. Например:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo Впереди-{A,B,C}-позади</strong></p>

    <p class="list-last">Впереди-A-позади Впереди-B-позади Впереди-C-позади</p>

    <p xml:lang="ru-RU">Шаблоны с фигурными скобками могут содержать начальную часть, которая называется <em>преамбулой</em>, и заключительную часть, которая называется <em>эпилогом</em>. Внутри фигурных скобок находится список строк, разделенных запятыми, или диапазон целых чисел или одиночных символов. Использование пробелов внутри фигурных скобок не допускается. Ниже приводится пример с использованием диапазона целых чисел:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo Число_{1..5}</strong></p>

    <p class="list-last">Число_1 Число_2 Число_3 Число_4 Число_5</p>

    <p xml:lang="ru-RU">В следующем примере используется диапазон символов в обратном порядке:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo {Z..A}</strong></p>

    <p class="list-last">Z Y X W V U T S R Q P O N M L K J I H G F E D C B A</p>

    <p xml:lang="ru-RU">Допускается вложение фигурных скобок:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo a{A{1,2},B{3,4}}b</strong></p>

    <p class="list-last">aA1b aA2b aB3b aB4b</p>

    <p xml:lang="ru-RU">Какую пользу можно извлечь из этого? Такая возможность может пригодиться для формирования списков файлов или каталогов, которые требуется создать. Например, фотограф, имеющий огромную коллекцию фотографий и желающий организовать ее по годам и месяцам, мог бы начать с создания группы каталогов с именами, состоящими из номера года и месяца. Благодаря этому имена каталогов будут отсортированы в хронологическом порядке. Можно было бы ввести полный список каталогов, но это обременительно и чревато ошибками. Вместо этого выполним следующую команду:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>mkdir Pics</strong></p>

    <p class="listing-body">[me@linuxbox ~]$ <strong>cd Pics</strong></p>

    <p class="listing-body">[me@linuxbox Pics]$ <strong>mkdir {2009..2011}-0{1..9} {2009..2011}-{10..12}</strong></p>

    <p class="listing-body">[me@linuxbox Pics]$ <strong>ls</strong></p>

    <p class="listing-body">2009-01 2009-07 2010-01 2010-07 2011-01 2011-07</p>

    <p class="listing-body">2009-02 2009-08 2010-02 2010-08 2011-02 2011-08</p>

    <p class="listing-body">2009-03 2009-09 2010-03 2010-09 2011-03 2011-09</p>

    <p class="listing-body">2009-04 2009-10 2010-04 2010-10 2011-04 2011-10</p>

    <p class="listing-body">2009-05 2009-11 2010-05 2010-11 2011-05 2011-11</p>

    <p class="list-last">2009-06 2009-12 2010-06 2010-12 2011-06 2011-12</p>

    <p xml:lang="ru-RU">Однако!</p>

    <h3 xml:lang="ru-RU">Подстановка параметров</h3>

    <p class="Normal0" xml:lang="ru-RU">В этой главе мы лишь кратко коснемся подстановки параметров, а детально обсудим ее позже. Эта возможность полезнее в сценариях на языке командной оболочки, чем непосредственно в командной строке. Многие из ее возможностей имеют отношение к способности системы хранить маленькие фрагменты данных и присваивать этим фрагментам имена. Многие такие фрагменты, правильнее их называть <em>переменными</em>, уже существуют и доступны для исследования. Например, переменная с именем <span class="command char-style-override-1">USER</span> хранит ваше имя пользователя. Подстановка параметра и получение содержимого переменной <span class="command char-style-override-1">USER</span> выполняется следующим образом:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo $USER</strong></p>

    <p class="list-last">me</p>

    <p xml:lang="ru-RU">Чтобы увидеть список доступных переменных, выполните следующую команду:</p>

    <p class="list-one">[me@linuxbox ~]$ <strong>printenv | less</strong></p>

    <p xml:lang="ru-RU">Возможно, вы обратили внимание, что если в других вариантах подстановки допустить ошибку в шаблоне, подстановка не будет выполнена и команда <span class="command char-style-override-1">echo</span> просто выведет ошибочный шаблон. В случае с подстановкой параметров все иначе: если ошибиться в имени переменной, подстановка все равно будет выполнена, но результатом будет пустая строка:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo $SUER</strong></p>

    <p class="listing-body">[me@linuxbox ~]$</p>

    <h3 xml:lang="ru-RU">Подстановка команд</h3>

    <p class="Normal0" xml:lang="ru-RU">Подстановка команд позволяет использовать поток вывода команд в качестве аргументов других команд:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo $(ls)</strong></p>

    <p class="list-last">Desktop Documents ls-output.txt Music Pictures Public Templates Videos</p>

    <p xml:lang="ru-RU">Один из моих любимых вариантов выглядит так:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>ls -l $(which cp)</strong></p>

    <p class="list-last">-rwxr-xr-x 1 root root 71516 2012-12-05 08:58 /bin/cp</p>

    <p xml:lang="ru-RU">Здесь результат команды <span class="command char-style-override-1">which </span><span class="command char-style-override-1">cp</span> передается как аргумент команде <span class="command char-style-override-1">ls</span>, благодаря чему мы получаем информацию о программе <span class="command char-style-override-1">cp</span>, не зная полного пути к ней. Подстановка команд не ограничивается такими простыми командами. Можно использовать целые конвейеры (здесь показана только часть вывода):</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>file $(ls /usr/bin/* | grep zip)</strong></p>

    <p class="listing-body">/usr/bin/bunzip2:&#160;&#160;&#160;&#160;&#160;&#160;symbolic link to `bzip2'</p>

    <p class="listing-body">/usr/bin/bzip2:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV ), dynamically linked (uses shared libs), for GNU/Linux 2.6.9, stripped</p>

    <p class="listing-body">/usr/bin/bzip2recover: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.9, stripped</p>

    <p class="listing-body">/usr/bin/funzip:&#160;&#160;&#160;&#160;&#160;&#160;&#160;ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.9, stripped</p>

    <p class="listing-body">/usr/bin/gpg-zip:&#160;&#160;&#160;&#160;&#160;&#160;Bourne shell script text executable</p>

    <p class="listing-body">/usr/bin/gunzip:&#160;&#160;&#160;&#160;&#160;&#160;&#160;symbolic link to `../../bin/gunzip'</p>

    <p class="listing-body">/usr/bin/gzip:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;symbolic link to `../../bin/gzip'</p>

    <p class="list-last">/usr/bin/mzip:&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;symbolic link to `mtools'</p>

    <p xml:lang="ru-RU">В этом примере результаты конвейера превратились в список аргументов команды <span class="command char-style-override-1">file</span>.</p>

    <p xml:lang="ru-RU">Механизм подстановки команд имеет альтернативный синтаксис, унаследованный от более старых командных оболочек, который также поддерживается в <span class="command char-style-override-1">bash</span>. В нем вместо знака доллара и круглых скобок используются обратные апострофы:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>ls -l `which cp`</strong></p>

    <p class="listing-body">-rwxr-xr-x 1 root root 71516 2012-12-05 08:58 /bin/cp</p>

    <h2 id="toc_marker-10-2" xml:lang="ru-RU">Экранирование</h2>

    <p class="Normal0" xml:lang="ru-RU">Теперь, после знакомства с множеством способов подстановки, поддерживаемых командной оболочкой, можно начинать учиться управлять ими. Например, взгляните на эту команду:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo this is a&#160;&#160;&#160;&#160;&#160;test</strong></p>

    <p class="list-last">this is a test</p>

    <p xml:lang="ru-RU">Или на эту:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo Итого $100.00</strong></p>

    <p class="list-last">Итого 00.00</p>

    <p xml:lang="ru-RU">В первом примере механизм <em>разбиения на слова</em> удалил дополнительные пробелы из списка аргументов команды <span class="command char-style-override-1">echo</span>. Во втором — механизм подстановки параметров подставил пустую строку вместо <span class="command char-style-override-1">$1</span>, потому что не нашел такую переменную. Командная оболочка предоставляет механизм, который называется <em>экранированием</em> (quoting), для выборочного подавления нежелательной подстановки.</p>

    <h3 xml:lang="ru-RU">Двойные кавычки</h3>

    <p class="Normal0" xml:lang="ru-RU">Первый тип экранирования, который мы рассмотрим, — <em>двойные кавычки</em>. Если заключить текст в двойные кавычки, все специальные символы потеряют свое специальное значение и будут интерпретироваться как обычные символы. Исключение составляют: <span class="command char-style-override-1">$</span> (знак доллара), <span class="command char-style-override-1">\</span> (обратный слеш) и <span class="command char-style-override-1">`</span> (обратный апостроф). То есть разбиение на слова, подстановка путей, подстановка тильды и подстановка фигурных скобок выполняться не будут, но подстановка параметров, подстановка значений арифметических выражений и подстановка команд все еще будут выполняться. Благодаря двойным кавычкам мы сможем обрабатывать имена файлов с пробелами. Представьте, что мы по ошибке создали файл с именем <em>Два слова.txt</em>. Если попытаться использовать это имя в командной строке, механизм разбиения слов будет интерпретировать его как два отдельных аргумента:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>ls -l Два слова.txt</strong></p>

    <p class="listing-body">ls: невозможно получить доступ к 'Два': Нет такого файла или каталога</p>

    <p class="list-last">ls: невозможно получить доступ к 'слова.txt': Нет такого файла или каталога</p>

    <p xml:lang="ru-RU">Добавив двойные кавычки, можно запретить разбиение слов и получить желаемый результат; кроме того, с помощью двойных кавычек мы исправим ошибку:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>ls -l "Два слова.txt"</strong></p>

    <p class="listing-body">-rw-rw-r-- 1 me me 18 2012-02-20 13:03 Два слова.txt</p>

    <p class="list-last">[me@linuxbox ~]$ <strong>mv "Два слова.txt" Два_слова.txt</strong></p>

    <p xml:lang="ru-RU">Вот так! Теперь не нужно вводить эти противные двойные кавычки.</p>

    <p xml:lang="ru-RU">Запомните: подстановка параметров, подстановка значений арифметических выражений и подстановка команд все еще выполняются в двойных кавычках:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo "$USER $((2+2)) $(cal)"</strong></p>

    <p class="listing-body">me 4&#160;&#160;&#160;February 2012</p>

    <p class="listing-body">Su Mo Tu We Th Fr Sa</p>

    <p class="listing-body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1&#160;&#160;2&#160;&#160;3&#160;&#160;4</p>

    <p class="listing-body">5&#160;&#160;6&#160;&#160;7&#160;&#160;8&#160;&#160;9 10 11</p>

    <p class="listing-body">12 13 14 15 16 17 18</p>

    <p class="listing-body">19 20 21 22 23 24 25</p>

    <p class="list-last">26 27 28 29</p>

    <p xml:lang="ru-RU">Давайте отвлечемся и посмотрим, какой эффект оказывают двойные кавычки на подстановку команд. Сначала рассмотрим действие механизма разбиения на слова. В одном из примеров, приведенных выше, мы видели, как механизм разбиения на слова удаляет дополнительные пробелы из текста:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo this is a&#160;&#160;&#160;&#160;&#160;test</strong></p>

    <p class="list-last">this is a test</p>

    <p xml:lang="ru-RU">По умолчанию этот механизм находит пробелы, символы табуляции и символы перевода строки и интерпретирует их как разделители слов. То есть вне кавычек упомянутые символы не считаются частью текста. Они являются лишь <em>разделителями</em>. Поскольку они делят слова на аргументы, получается, что в нашем примере командная строка состоит из команды и четырех аргументов. Однако если добавить двойные кавычки, разбиение на слова выполняться не будет и внутренние пробелы не будут считаться разделителями — они станут частью аргумента:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo "this is a&#160;&#160;&#160;&#160;&#160;test"</strong></p>

    <p class="list-last">this<strong> </strong>is a&#160;&#160;&#160;&#160;&#160;test</p>

    <p xml:lang="ru-RU">После добавления двойных кавычек командная строка будет состоять из команды и одного аргумента.</p>

    <p xml:lang="ru-RU">Тот факт, что символы перевода строки интерпретируются механизмом разбиения на слова как разделители, вызывает интересный и трудноуловимый эффект при подстановке команд. Взгляните:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo $(cal)</strong></p>

    <p class="listing-body">February 2012 Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29</p>

    <p class="listing-body">[me@linuxbox ~]$ <strong>echo "$(cal)"</strong></p>

    <p class="listing-body">&#160;&#160;&#160;February 2012</p>

    <p class="listing-body">Su Mo Tu We Th Fr Sa</p>

    <p class="listing-body">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1&#160;&#160;2&#160;&#160;3&#160;&#160;4</p>

    <p class="listing-body">5&#160;&#160;6&#160;&#160;7&#160;&#160;8&#160;&#160;9 10 11</p>

    <p class="listing-body">12 13 14 15 16 17 18</p>

    <p class="listing-body">19 20 21 22 23 24 25</p>

    <p class="list-last">26 27 28 29</p>

    <p xml:lang="ru-RU">В первом случае подстановка команд без кавычек привела к созданию командной строки с 38 аргументами, а во втором случае получилась командная строка с одним аргументом, включающим внутренние пробелы и символы перевода строки.</p>

    <h3 xml:lang="ru-RU">Одиночные кавычки</h3>

    <p class="Normal0" xml:lang="ru-RU">Если вам требуется подавить <em>все</em> подстановки, используйте одиночные кавычки. Ниже для сравнения приводятся результаты неэкранированной команды и коман­ды, экранированной двойными и одиночными кавычками:</p>

    <p class="list-first">[me@linuxbox ~]$ <strong>echo text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER</strong></p>

    <p class="listing-body">text /home/me/ls-output.txt a b foo 4 me</p>

    <p class="listing-body">[me@linuxbox ~]$ <strong>echo "text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER"</strong></p>

    <p class="listing-body">text ~/*.txt {a,b} foo 4 me</p>

    <p class="listing-body">[me@linuxbox ~]$ <strong>echo 'text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER'</strong></p>

    <p class="list-last">text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER</p>

    <p xml:lang="ru-RU">Как видите, каждый следующий уровень экранирования все больше и больше подавляет подстановку.</p>

    <h3 xml:lang="ru-RU">Экранирование символов</h3>

    <p class="Normal0" xml:lang="ru-RU">Иногда бывает необходимо экранировать только один символ. Для этого достаточно добавить перед символом обратный слеш, который в данном случае называется <em>экранирующим символом</em> (escape character). Часто этот прием используется в двойных кавычках, чтобы выборочно предотвратить подстановку.</p>

    <p class="list-first">[me@linuxbox ~]$ echo "Баланс счета пользователя $USER: \$5.00"<strong></strong></p>

    <p class="list-last">Баланс счета пользователя me: $5.00</p>

    <p xml:lang="ru-RU">Экранирование символов также широко применяется для подавления специального значения символов в именах файлов. Например, в именах файлов допускается использование символов, которые имеют специальное значение для командной оболочки. К их числу относятся: <span class="command char-style-override-1">$</span>, <span class="command char-style-override-1">!</span>, <span class="command char-style-override-1">&amp;</span>, (пробел) и др. Чтобы включить специальный символ в имя файла, его достаточно экранировать, как показано ниже:</p>

    <p class="list-one">[me@linuxbox ~]$ <strong>mv bad\&amp;filename good_filename</strong></p>

    <p xml:lang="ru-RU">Чтобы включить сам экранирующий символ, его также нужно экранировать, введя <span class="command char-style-override-1">\\</span>. Имейте в виду, что внутри одиночных кавычек обратный слеш теряет свое специальное значение и интерпретируется как обычный символ.</p>

    <h2 id="toc_marker-10-3" xml:lang="ru-RU">Заключительное замечание</h2>

    <p class="Normal0" xml:lang="ru-RU">По мере накопления опыта использования командной оболочки мы все чаще будем использовать возможности подстановки и экранирования, поэтому важно хорошо понимать, как они работают. Фактически можно смело утверждать, что эти два механизма являются наиболее важными для изучения аспектами командной оболочки. Без надлежащего понимания того, как действует подстановка, командная оболочка будет оставаться источником непонимания и домыслов, при этом многие ее возможности останутся неиспользованными.</p>

    <p class="Vrezka-head" xml:lang="ru-RU">управляющие последовательности</p>

    <p class="Vrezka-body" xml:lang="ru-RU">Обратный слеш используется не только в роли экранирующего символа, но и как часть специальных символов, которые называют <em>управляющими кодами</em> (control codes). Первые 32 символа в схеме кодирования ASCII использовались для передачи различных команд в устройствах, таких как телетайп. Некоторые из этих кодов хорошо знакомы вам (табуляция, забой, перевод строки и возврат каретки), тогда как другие — нет (пустой символ, конец передачи и подтверждение), как показано в табл. 7.2.</p>

    <p class="Tabl-head" xml:lang="ru-RU"><strong>Таблица 7.2.</strong> Управляющие последовательности</p>

    <table id="table-18" class="Table-Style-1">
      <colgroup>      <col/>

      <col/>

</colgroup>

      <tbody>      <tr>      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Управляющая последовательность</p>

</td>

      <td class="Cell-Style-2">       <p class="Tabl-head" xml:lang="ru-RU">Значение</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">\a</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Звонок («предупреждение» — заставляет компьютер подать звуковой сигнал)</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">\b</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Забой (backspace)</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">\n</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Новая строка (в Unix-подобных системах этот символ выполняет перевод строки)</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">\r</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Возврат каретки</p>

</td>

</tr>

      <tr>      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU"><span class="command char-style-override-4">\t</span></p>

</td>

      <td class="Cell-Style-1">       <p class="Tabl-body" xml:lang="ru-RU">Табуляция</p>

</td>

</tr>

</tbody>
    </table>

    <p class="No-Paragraph-Style"></p>

    <p class="Vrezka-body" xml:lang="ru-RU">В этой таблице перечислены некоторые наиболее известные управляющие последовательности. Идея использования обратного слеша зародилась в языке программирования C и была заимствована многими другими языками, включая язык командной оболочки. Параметр <span class="command char-style-override-1">-e</span> команды <span class="command char-style-override-1">echo</span> включает интерпретацию управляющих последовательностей. Их можно также заключать в конструкцию <span class="command char-style-override-1">$' '</span>. Ниже демонстрируется использование команды <span class="command char-style-override-1">sleep</span>, простой программы, которая всего лишь ждет указанное число секунд и завершается, для создания элементарного таймера.</p>

    <p class="vrezka-listing"><span class="command char-style-override-7">sleep 10; echo -e "Time's up\a"</span></p>

    <p class="Vrezka-body" xml:lang="ru-RU">То же самое можно выразить так:</p>

    <p class="vrezka-listing"><span class="command char-style-override-7">sleep 10; echo "Time's up" $'\a'</span></p>
  </div>
</body>
</html>